// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SumServices_Sum_FullMethodName    = "/calculator.SumServices/Sum"
	SumServices_Primes_FullMethodName = "/calculator.SumServices/Primes"
	SumServices_Avg_FullMethodName    = "/calculator.SumServices/Avg"
	SumServices_Max_FullMethodName    = "/calculator.SumServices/Max"
	SumServices_Sqrt_FullMethodName   = "/calculator.SumServices/Sqrt"
)

// SumServicesClient is the client API for SumServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SumServicesClient interface {
	// rpc MethodName (Request) returns (Response);
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	Primes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PrimeResponse], error)
	Avg(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AvgRequest, AvgResponse], error)
	Max(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MaxRequest, MaxResponse], error)
	Sqrt(ctx context.Context, in *SqrtRequest, opts ...grpc.CallOption) (*SqrtResponse, error)
}

type sumServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewSumServicesClient(cc grpc.ClientConnInterface) SumServicesClient {
	return &sumServicesClient{cc}
}

func (c *sumServicesClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, SumServices_Sum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sumServicesClient) Primes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PrimeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SumServices_ServiceDesc.Streams[0], SumServices_Primes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PrimeRequest, PrimeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SumServices_PrimesClient = grpc.ServerStreamingClient[PrimeResponse]

func (c *sumServicesClient) Avg(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AvgRequest, AvgResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SumServices_ServiceDesc.Streams[1], SumServices_Avg_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AvgRequest, AvgResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SumServices_AvgClient = grpc.ClientStreamingClient[AvgRequest, AvgResponse]

func (c *sumServicesClient) Max(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MaxRequest, MaxResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SumServices_ServiceDesc.Streams[2], SumServices_Max_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MaxRequest, MaxResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SumServices_MaxClient = grpc.BidiStreamingClient[MaxRequest, MaxResponse]

func (c *sumServicesClient) Sqrt(ctx context.Context, in *SqrtRequest, opts ...grpc.CallOption) (*SqrtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SqrtResponse)
	err := c.cc.Invoke(ctx, SumServices_Sqrt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SumServicesServer is the server API for SumServices service.
// All implementations must embed UnimplementedSumServicesServer
// for forward compatibility.
type SumServicesServer interface {
	// rpc MethodName (Request) returns (Response);
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	Primes(*PrimeRequest, grpc.ServerStreamingServer[PrimeResponse]) error
	Avg(grpc.ClientStreamingServer[AvgRequest, AvgResponse]) error
	Max(grpc.BidiStreamingServer[MaxRequest, MaxResponse]) error
	Sqrt(context.Context, *SqrtRequest) (*SqrtResponse, error)
	mustEmbedUnimplementedSumServicesServer()
}

// UnimplementedSumServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSumServicesServer struct{}

func (UnimplementedSumServicesServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedSumServicesServer) Primes(*PrimeRequest, grpc.ServerStreamingServer[PrimeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Primes not implemented")
}
func (UnimplementedSumServicesServer) Avg(grpc.ClientStreamingServer[AvgRequest, AvgResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Avg not implemented")
}
func (UnimplementedSumServicesServer) Max(grpc.BidiStreamingServer[MaxRequest, MaxResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Max not implemented")
}
func (UnimplementedSumServicesServer) Sqrt(context.Context, *SqrtRequest) (*SqrtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sqrt not implemented")
}
func (UnimplementedSumServicesServer) mustEmbedUnimplementedSumServicesServer() {}
func (UnimplementedSumServicesServer) testEmbeddedByValue()                     {}

// UnsafeSumServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SumServicesServer will
// result in compilation errors.
type UnsafeSumServicesServer interface {
	mustEmbedUnimplementedSumServicesServer()
}

func RegisterSumServicesServer(s grpc.ServiceRegistrar, srv SumServicesServer) {
	// If the following call pancis, it indicates UnimplementedSumServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SumServices_ServiceDesc, srv)
}

func _SumServices_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumServicesServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SumServices_Sum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumServicesServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SumServices_Primes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SumServicesServer).Primes(m, &grpc.GenericServerStream[PrimeRequest, PrimeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SumServices_PrimesServer = grpc.ServerStreamingServer[PrimeResponse]

func _SumServices_Avg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SumServicesServer).Avg(&grpc.GenericServerStream[AvgRequest, AvgResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SumServices_AvgServer = grpc.ClientStreamingServer[AvgRequest, AvgResponse]

func _SumServices_Max_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SumServicesServer).Max(&grpc.GenericServerStream[MaxRequest, MaxResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SumServices_MaxServer = grpc.BidiStreamingServer[MaxRequest, MaxResponse]

func _SumServices_Sqrt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqrtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumServicesServer).Sqrt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SumServices_Sqrt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumServicesServer).Sqrt(ctx, req.(*SqrtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SumServices_ServiceDesc is the grpc.ServiceDesc for SumServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SumServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.SumServices",
	HandlerType: (*SumServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _SumServices_Sum_Handler,
		},
		{
			MethodName: "Sqrt",
			Handler:    _SumServices_Sqrt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Primes",
			Handler:       _SumServices_Primes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Avg",
			Handler:       _SumServices_Avg_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Max",
			Handler:       _SumServices_Max_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
